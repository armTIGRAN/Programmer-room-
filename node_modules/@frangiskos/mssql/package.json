{
  "_from": "@frangiskos/mssql",
  "_id": "@frangiskos/mssql@0.1.2",
  "_inBundle": false,
  "_integrity": "sha512-AcolUtsS01HS4QQ0ZC6V4TVsFow6vdMHs3TRgXJuuYrMTkVn0dxqXhk+jcE1J6ogv7bb6Sl3uIBHEZq7ILOhUw==",
  "_location": "/@frangiskos/mssql",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@frangiskos%2fmssql",
    "fetchSpec": "latest",
    "name": "@frangiskos/mssql",
    "raw": "@frangiskos/mssql",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@frangiskos",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@frangiskos/mssql/-/mssql-0.1.2.tgz",
  "_shasum": "cb30f8f669da4e8b289534e579afff269eb80030",
  "_shrinkwrap": null,
  "_spec": "@frangiskos/mssql",
  "_where": "D:\\Тигран\\Programming\\Programmer room",
  "author": {
    "email": "frangiskos@gmail.com",
    "name": "Frangiskos"
  },
  "bugs": {
    "url": "https://github.com/frangiskos/mssql/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/mssql": "^6.0.0",
    "mssql": "^6.0.1"
  },
  "deprecated": false,
  "description": "Connect to an MS-SQL server and run queries using a simple API",
  "devDependencies": {
    "dotenv": "^8.2.0",
    "ts-node": "^8.6.2",
    "typescript": "^3.7.5"
  },
  "engines": {
    "node": ">=6"
  },
  "homepage": "https://github.com/frangiskos/mssql",
  "keywords": [
    "database",
    "mssql",
    "node-mssql",
    "node-sqlserver",
    "sql",
    "sqlserver"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "@frangiskos/mssql",
  "optionalDependencies": {},
  "readme": "# Connect to an MS-SQL server and run queries using a simple API\n\nA simple way to run SQL queries using Async/Await and Promises. This is not an ORM.  \nIt uses node-mssql under the hood\n\n## Installation\n\n```bash\nnpm install @frangiskos/mssql\n```\n\n## Initialization\n\n```typescript\nimport { sql, SqlConfig } from '@frangiskos/mssql';\nconst sqlConfig: SqlConfig = {\n    user: 'my_db_user',\n    password: 'my_super_secret_password',\n    database: 'my_database_name',\n    server: 'the_sql_server'\n};\n\nsql.init(sqlConfig);\n```\n\n## Usage\n\n> The first parameter is the SQL query to execute. Use @P1, @P2 for parameter values.\n> the rest parameters are the values for the parameters (The first one will replace @P1, the second will replace @P2 and so on)\n\n```typescript\nimport { sql } from '@frangiskos/mssql';\nsql.query('SELECT * FROM USERS WHERE name like @P1 AND isActive = @P2', 'John%', true)\n    .then(data => console.log(data))\n    .catch(error => console.error(error));\n```\n\n### Using Async / Await\n\n```typescript\ntry {\n    const data = await sql.query('SELECT * FROM USERS WHERE name like @P1 AND isActive = @P2', 'John%', true);\n} catch (error) {\n    console.log(error);\n}\n```\n\n### Methods\n\n-   sql.query (alias: sql.q): Executes query and returns an array with the results. Can be used for any query types\n-   sql.queryOne (alias: sql.q1): Executes the query and returns the first record, or null if there are no records\n-   sql.insertReturnIdentity (alias: sql.ii): Can be used for INSERT. It will return the identity of the inserted record (i.e. SCOPE_IDENTITY()) or null\n\n### Examples\n\nINSERT RECORD\n\n```typescript\n    await sql.q(\n        `INSERT INTO people (name, birthdate, childrenCount, salary, isMarried)\n        VALUES (@P1, @P2, @P3, @P4, @P5)`,\n        'Johnny',\n         new Date('2000-01-01'),\n         2,\n         2345.67,\n         true\n    };\n```\n\nINSERT AND GET ID\n\n```typescript\nconst id = await sql.ii(`INSERT INTO people (name) VALUES (@P1)`, 'Not Johnny');\n```\n\nUPDATE USING ISO DATE STRING\n\n```typescript\nconst id = await sql.q(`UPDATE people SET birthdate=@P1 WHERE id=@P2`, '2000-01-01', 2);\n```\n\nSELECT RECORDS FROM TABLE\n\n```typescript\n    const people = await sql.q(\n        `SELECT * FROM people WHERE name like @P1`,\n        '%Johnny')\n    ); // returns an array with all matching records\n```\n\nSELECT SINGLE RECORD FROM TABLE\n\n```typescript\n    const Johnny = await sql.q(\n        `SELECT * FROM people WHERE id = @P1`,\n        1)\n    ); // returns the first matching record or null\n```\n\nSee ./src/tests.ts for more examples.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/frangiskos/mssql.git"
  },
  "scripts": {
    "build": "tsc",
    "prepare": "npm run test && npm run build",
    "publish": "npm publish",
    "test": "ts-node src/tests"
  },
  "types": "dist/index.d.ts",
  "version": "0.1.2"
}
